# Здесь мы научим программу брать новый текст, превращать его в числа с помощью сохранённого векторизатора и
# прогонять через модель, чтобы получить предсказание.

"""import joblib

# Загружаем ранее сохранённые модель и векторизатор
model = joblib.load("artifacts/model_rf.joblib")
vectorizer = joblib.load("artifacts/vectorizer_tf.joblib")

 # Принимает новый текст от пользователя, который ещё не превращён в числа.
def predict_text(text: str) -> str:

    # Функция принимает текст и возвращает предсказанную категорию.

    # Преобразуем текст в числовой вектор
    X = vectorizer.transform([text])

    # Получаем предсказание модели
    prediction = model.predict(X)[0]

    return prediction"""


import joblib  # для загрузки сохранённого пайплайна

# Загружаем сохранённый пайплайн
pipeline = joblib.load("artifacts/pipeline_rf.joblib")

# Функция для предсказания нового текста
def predict_text(text: str) -> str:
    """
    Принимает текст и возвращает предсказанную категорию.
    """
    # Всё делается внутри пайплайна
    prediction = pipeline.predict([text])[0]
    # Текст превращается в TF-IDF вектор
    # Прогоняется через Random Forest
    # Возвращается результат (например, 'позитив' или 'негатив')
    return prediction

# 4. Тестирование функции
if __name__ == "__main__":
    sample_text = "Этот фильм был очень интересным и захватывающим!"
    print("Текст:", sample_text)
    print("Предсказание:", predict_text(sample_text))
    # Что делаем: проверяем работу функции на примере
    # Что получаем: уверенность, что пайплайн работает корректно

