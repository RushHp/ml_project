"""import pandas as pd  # импортируем библиотеку pandas для работы с таблицами
from src.config import DATA_PATH  # импортируем путь к датасету из конфиг-файла
from sklearn.model_selection import train_test_split  # импортируем функцию для разбиения данных
from sklearn.feature_extraction.text import TfidfVectorizer  # импортируем TF-IDF векторизатор
from sklearn.ensemble import RandomForestClassifier  # импортируем классификатор случайного леса
from sklearn.metrics import accuracy_score, classification_report  # импортируем метрики качества
import joblib  # импортируем библиотеку для сохранения и загрузки моделей

df = pd.read_csv(DATA_PATH)  # загружаем CSV в переменную df (таблица)

print(df.head())  # Первые пять строк

X = df['text']  # тексты (входные данные для модели)
y = df['label']  # метки (правильные ответы)

# Делим
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Делим на - обучение и тест.

print("Размер обучающей выборки:", len(X_train))
print("Размер тестовой выборки:", len(X_test))

# Векторизируем
vectorizer = TfidfVectorizer(max_features=5000)  # создаём объект векторизатора, переобразование текста в числа
X_train_tfidf = vectorizer.fit_transform(X_train)  # обучаем векторизатор на обучающих данных и преобразуем тексты
X_test_tfidf = vectorizer.transform(X_test)  # преобразуем тестовые тексты с уже обученным векторизатором

print("Размер обучающей матрицы:", X_train_tfidf.shape)
print("Размер тестовой матрицы:", X_test_tfidf.shape)

# Обучаем
model = RandomForestClassifier(n_estimators=100, random_state=42)  # создаём объект модели
model.fit(X_train_tfidf, y_train)  # обучаем модель на обучающих данных
y_pred = model.predict(X_test_tfidf)  # делаем предсказания на тестовых данных

# Смотрим точность обучения
print("Точность на тесте:", accuracy_score(y_test, y_pred))  # выводим точность
print(classification_report(y_test, y_pred))  # подробный отчёт по метрикам - оценка качества модели

# Сохраняем обученую модель
joblib.dump(model, 'artifacts/model_rf.joblib')  # сохраняем обученную модель
joblib.dump(vectorizer, 'artifacts/vectorizer_tf.joblib')  # сохраняем TF-IDF векторизатор, чтобы векторизатор мог преобразовывать новые тексты в те же числа, что и обучающие данные.

print("Модель и векторизатор успешно сохранены!")  # подтверждение"""


-------------------------------------------------------------------------------------------------------------------------------


# Здесь мы научим программу брать новый текст, превращать его в числа с помощью сохранённого векторизатора и
# прогонять через модель, чтобы получить предсказание.

"""import joblib

# Загружаем ранее сохранённые модель и векторизатор
model = joblib.load("artifacts/model_rf.joblib")
vectorizer = joblib.load("artifacts/vectorizer_tf.joblib")

 # Принимает новый текст от пользователя, который ещё не превращён в числа.
def predict_text(text: str) -> str:

    # Функция принимает текст и возвращает предсказанную категорию.

    # Преобразуем текст в числовой вектор
    X = vectorizer.transform([text])

    # Получаем предсказание модели
    prediction = model.predict(X)[0]

    return prediction"""